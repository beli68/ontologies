@startuml APPLICATION

package "example" {
    note as example
        凡例風に各ラインのルールを決めて書いていく
        ここの細かい考えた事は別途各図に情報を追加する
        まずはUML本来の表現？
    end note
    Class C1
    Class C2

    C1 <|-- C2 : "C2はC1のサブクラス（もしくは特殊化），C2を一般化するとC1"

    Class 全体
    Class 部分

    全体 o-- 部分 : "集約{aggregation)関係，全体が部分を持っている．部分は他の全体にあたるものと共有される"

    Class 全体1
    Class 部分1
    全体1 *-- 部分1 : "コンポジション(composition)関係，全体が部分を持っているが，部分が無いとなりたたない．もしくは全体が無くなると"
}


class ID{}

Class 名前{}

Class Mode{}

note right of Mode
    modeは大体enum？
end note


Class Permission{}

Class 文字列{}
Class 数値{}
Class read{}
Class create{}
Class update{}
Class read{}
Class delete{}

Permission --> read
read -- 数値 : 表現
read -- 文字列 : 表現
Permission --> create
create -- 数値 : 表現
create -- 文字列 : 表現
Permission --> update
Permission --> delete

Class Visibility{}

Permission <|-- Visibility

Class Scope{}

Permission <|-- Scope

Class User{
    id: ID
    name: 名前
}
User::id "0..*" o-- "1" ID: "IDを0個以上持つ"
User --> Permission
User::name "0..1" o-->"1" 名前: "名前を0個以上1個以下持つ"

note bottom of ID

IDに少なくとも2種類考えられる．
DB上で連番振るようなID
ログインに使用する様なID

end note

Class Owner{}
User <|-- Owner: "ユーザのロールとしてオーナーがある"

Class Member{}
User <|-- Member: "ユーザのロールとしてメンバーがある"

note top of User
ユーザと言う概念は最終的には人，
その時々でOwnerやMemberの様なロールで呼ばれる．
end note

Class Authentication{}

Class KnowledgeBasedAuthentication{}
Authentication <|-- KnowledgeBasedAuthentication: "認証の特殊化"

note bottom of KnowledgeBasedAuthentication
知っていことで認証する．
パスワードなど
end note

Class PossessionBasedAuthentication{}
Authentication <|-- PossessionBasedAuthentication: "認証の特殊化"

note bottom of PossessionBasedAuthentication
持っているものによって認証する．
TOTPなど
end note

Class TOTP{}

PossessionBasedAuthentication <|.. TOTP

Class InherentBasedAuthentication{}

Authentication <|-- InherentBasedAuthentication: "認証の特殊化"

note bottom of InherentBasedAuthentication
備えているものによって認証する．
指紋など
end note

Class BiometricAuthentication{}
InherentBasedAuthentication <|-- BiometricAuthentication: "生体認証は備えているものによる認証の特殊化"

Class Authorization{}

Class OAuth{}

Authorization <|-- OAuth

Class AccessToken

OAuth-->AccessToken

Class JWT{}

AccessToken <|-- JWT


Class 公開鍵認証{}

PossessionBasedAuthentication <.. 公開鍵認証

note as n1
Webシステムに認証/認可は付きもの

パスワードによる認証や
TOTPと組み合わせた多要素認証
OAuthによる認可
end note


Class Billing{}

Class Creditcard{}

Class 現金{}

Class 口座振替{}
Class 銀行振込{}
Class 請求書{}
Class 領収書{}
Class 支払方法{}

Billing -- 支払方法
支払方法 -- Creditcard
支払方法 -- 現金
支払方法 -- 口座振替
支払方法 -- 銀行振込
Billing -- 請求書
Billing -- 領収証

Class Price{}

Price -- Billing
note as billing_note
多くのサービスには何らかの形で支払が発生する，
それはサービスの利用料金にしはらいだったり，ECの注文だったり
支払方法
end note

@enduml